type GameSession {
  id: ID!
  hostId: ID!
  guestId: ID
  adventureId: ID!
  currentQuestionIndex: Int!
  hostScore: Int!
  guestScore: Int!
  sessionStatus: GameSessionStatus!
  questions: [Question] 
  questionScores: [QuestionScore]
  lastUpdateTimestamp: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Question {
  id: ID!
  question: String!
  options: [String!]!
  correctAnswer: String!
  gameSession: GameSession 
}

type QuestionScore {
  id: ID!
  questionIndex: Int!
  hostScore: Int!
  guestScore: Int!
  gameSession: GameSession 
}

type GameSessionConnection {
  items: [GameSession!]!
  nextToken: String
}

type Subscription {
  onUpdateGameSession(id: ID!): GameSession
    @aws_subscribe(mutations: ["joinGameSession", "answerQuestion", "startGameSession"])
}

enum GameSessionStatus {
  WAITING_FOR_PLAYER
  IN_PROGRESS
  COMPLETED
}

input CreateGameSessionInput {
  hostId: ID!
  adventureId: ID!
}

input JoinGameSessionInput {
  sessionId: ID!
  guestId: ID!
}

input AnswerQuestionInput {
  sessionId: ID!
  playerId: ID!
  answer: String!
  answerTime: AWSTimestamp!
}

type Mutation {
  createGameSession(input: CreateGameSessionInput!): GameSession
  joinGameSession(input: JoinGameSessionInput!): GameSession
  answerQuestion(input: AnswerQuestionInput!): GameSession
  startGameSession(sessionId: ID!): GameSession
}

type Query {
  getGameSession(id: ID!): GameSession
  listGameSessions(limit: Int, nextToken: String): GameSessionConnection
}
